// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package useCase

import (
	"github.com/CoolCodeTeam/2019_2_CoolCodeMicroServices/utils/models"
	"os"
	"sync"
)

var (
	lockMessagesUseCaseMockDeleteMessage        sync.RWMutex
	lockMessagesUseCaseMockEditMessage          sync.RWMutex
	lockMessagesUseCaseMockFindMessages         sync.RWMutex
	lockMessagesUseCaseMockGetChannelFile       sync.RWMutex
	lockMessagesUseCaseMockGetChannelMessages   sync.RWMutex
	lockMessagesUseCaseMockGetChatFile          sync.RWMutex
	lockMessagesUseCaseMockGetChatMessages      sync.RWMutex
	lockMessagesUseCaseMockGetMessageByID       sync.RWMutex
	lockMessagesUseCaseMockHideMessageForAuthor sync.RWMutex
	lockMessagesUseCaseMockLike                 sync.RWMutex
	lockMessagesUseCaseMockSaveChannelFile      sync.RWMutex
	lockMessagesUseCaseMockSaveChannelMessage   sync.RWMutex
	lockMessagesUseCaseMockSaveChatFile         sync.RWMutex
	lockMessagesUseCaseMockSaveChatMessage      sync.RWMutex
)

// Ensure, that MessagesUseCaseMock does implement MessagesUseCase.
// If this is not the case, regenerate this file with moq.
var _ MessagesUseCase = &MessagesUseCaseMock{}

// MessagesUseCaseMock is a mock implementation of MessagesUseCase.
//
//     func TestSomethingThatUsesMessagesUseCase(t *testing.T) {
//
//         // make and configure a mocked MessagesUseCase
//         mockedMessagesUseCase := &MessagesUseCaseMock{
//             DeleteMessageFunc: func(messageID uint64, userID uint64) error {
// 	               panic("mock out the DeleteMessage method")
//             },
//             EditMessageFunc: func(message *models.Message, userID uint64) error {
// 	               panic("mock out the EditMessage method")
//             },
//             FindMessagesFunc: func(findString string, ID uint64) (models.Messages, error) {
// 	               panic("mock out the FindMessages method")
//             },
//             GetChannelFileFunc: func(userID uint64, chatID uint64, photoUID string) (*os.File, error) {
// 	               panic("mock out the GetChannelFile method")
//             },
//             GetChannelMessagesFunc: func(channelID uint64, userID uint64) (models.Messages, error) {
// 	               panic("mock out the GetChannelMessages method")
//             },
//             GetChatFileFunc: func(userID uint64, chatID uint64, photoUID string) (*os.File, error) {
// 	               panic("mock out the GetChatFile method")
//             },
//             GetChatMessagesFunc: func(chatID uint64, userID uint64) (models.Messages, error) {
// 	               panic("mock out the GetChatMessages method")
//             },
//             GetMessageByIDFunc: func(messageID uint64) (*models.Message, error) {
// 	               panic("mock out the GetMessageByID method")
//             },
//             HideMessageForAuthorFunc: func(messageID uint64, userID uint64) error {
// 	               panic("mock out the HideMessageForAuthor method")
//             },
//             LikeFunc: func(ID uint64) error {
// 	               panic("mock out the Like method")
//             },
//             SaveChannelFileFunc: func(userID uint64, chatID uint64, file models.File) (string, error) {
// 	               panic("mock out the SaveChannelFile method")
//             },
//             SaveChannelMessageFunc: func(message *models.Message) (uint64, error) {
// 	               panic("mock out the SaveChannelMessage method")
//             },
//             SaveChatFileFunc: func(userID uint64, chatID uint64, file models.File) (string, error) {
// 	               panic("mock out the SaveChatFile method")
//             },
//             SaveChatMessageFunc: func(message *models.Message) (uint64, error) {
// 	               panic("mock out the SaveChatMessage method")
//             },
//         }
//
//         // use mockedMessagesUseCase in code that requires MessagesUseCase
//         // and then make assertions.
//
//     }
type MessagesUseCaseMock struct {
	// DeleteMessageFunc mocks the DeleteMessage method.
	DeleteMessageFunc func(messageID uint64, userID uint64) error

	// EditMessageFunc mocks the EditMessage method.
	EditMessageFunc func(message *models.Message, userID uint64) error

	// FindMessagesFunc mocks the FindMessages method.
	FindMessagesFunc func(findString string, ID uint64) (models.Messages, error)

	// GetChannelFileFunc mocks the GetChannelFile method.
	GetChannelFileFunc func(userID uint64, chatID uint64, photoUID string) (*os.File, error)

	// GetChannelMessagesFunc mocks the GetChannelMessages method.
	GetChannelMessagesFunc func(channelID uint64, userID uint64) (models.Messages, error)

	// GetChatFileFunc mocks the GetChatFile method.
	GetChatFileFunc func(userID uint64, chatID uint64, photoUID string) (*os.File, error)

	// GetChatMessagesFunc mocks the GetChatMessages method.
	GetChatMessagesFunc func(chatID uint64, userID uint64) (models.Messages, error)

	// GetMessageByIDFunc mocks the GetMessageByID method.
	GetMessageByIDFunc func(messageID uint64) (*models.Message, error)

	// HideMessageForAuthorFunc mocks the HideMessageForAuthor method.
	HideMessageForAuthorFunc func(messageID uint64, userID uint64) error

	// LikeFunc mocks the Like method.
	LikeFunc func(ID uint64) error

	// SaveChannelFileFunc mocks the SaveChannelFile method.
	SaveChannelFileFunc func(userID uint64, chatID uint64, file models.File) (string, error)

	// SaveChannelMessageFunc mocks the SaveChannelMessage method.
	SaveChannelMessageFunc func(message *models.Message) (uint64, error)

	// SaveChatFileFunc mocks the SaveChatFile method.
	SaveChatFileFunc func(userID uint64, chatID uint64, file models.File) (string, error)

	// SaveChatMessageFunc mocks the SaveChatMessage method.
	SaveChatMessageFunc func(message *models.Message) (uint64, error)

	// calls tracks calls to the methods.
	calls struct {
		// DeleteMessage holds details about calls to the DeleteMessage method.
		DeleteMessage []struct {
			// MessageID is the messageID argument value.
			MessageID uint64
			// UserID is the userID argument value.
			UserID uint64
		}
		// EditMessage holds details about calls to the EditMessage method.
		EditMessage []struct {
			// Message is the message argument value.
			Message *models.Message
			// UserID is the userID argument value.
			UserID uint64
		}
		// FindMessages holds details about calls to the FindMessages method.
		FindMessages []struct {
			// FindString is the findString argument value.
			FindString string
			// ID is the ID argument value.
			ID uint64
		}
		// GetChannelFile holds details about calls to the GetChannelFile method.
		GetChannelFile []struct {
			// UserID is the userID argument value.
			UserID uint64
			// ChatID is the chatID argument value.
			ChatID uint64
			// PhotoUID is the photoUID argument value.
			PhotoUID string
		}
		// GetChannelMessages holds details about calls to the GetChannelMessages method.
		GetChannelMessages []struct {
			// ChannelID is the channelID argument value.
			ChannelID uint64
			// UserID is the userID argument value.
			UserID uint64
		}
		// GetChatFile holds details about calls to the GetChatFile method.
		GetChatFile []struct {
			// UserID is the userID argument value.
			UserID uint64
			// ChatID is the chatID argument value.
			ChatID uint64
			// PhotoUID is the photoUID argument value.
			PhotoUID string
		}
		// GetChatMessages holds details about calls to the GetChatMessages method.
		GetChatMessages []struct {
			// ChatID is the chatID argument value.
			ChatID uint64
			// UserID is the userID argument value.
			UserID uint64
		}
		// GetMessageByID holds details about calls to the GetMessageByID method.
		GetMessageByID []struct {
			// MessageID is the messageID argument value.
			MessageID uint64
		}
		// HideMessageForAuthor holds details about calls to the HideMessageForAuthor method.
		HideMessageForAuthor []struct {
			// MessageID is the messageID argument value.
			MessageID uint64
			// UserID is the userID argument value.
			UserID uint64
		}
		// Like holds details about calls to the Like method.
		Like []struct {
			// ID is the ID argument value.
			ID uint64
		}
		// SaveChannelFile holds details about calls to the SaveChannelFile method.
		SaveChannelFile []struct {
			// UserID is the userID argument value.
			UserID uint64
			// ChatID is the chatID argument value.
			ChatID uint64
			// File is the file argument value.
			File models.File
		}
		// SaveChannelMessage holds details about calls to the SaveChannelMessage method.
		SaveChannelMessage []struct {
			// Message is the message argument value.
			Message *models.Message
		}
		// SaveChatFile holds details about calls to the SaveChatFile method.
		SaveChatFile []struct {
			// UserID is the userID argument value.
			UserID uint64
			// ChatID is the chatID argument value.
			ChatID uint64
			// File is the file argument value.
			File models.File
		}
		// SaveChatMessage holds details about calls to the SaveChatMessage method.
		SaveChatMessage []struct {
			// Message is the message argument value.
			Message *models.Message
		}
	}
}

// DeleteMessage calls DeleteMessageFunc.
func (mock *MessagesUseCaseMock) DeleteMessage(messageID uint64, userID uint64) error {
	if mock.DeleteMessageFunc == nil {
		panic("MessagesUseCaseMock.DeleteMessageFunc: method is nil but MessagesUseCase.DeleteMessage was just called")
	}
	callInfo := struct {
		MessageID uint64
		UserID    uint64
	}{
		MessageID: messageID,
		UserID:    userID,
	}
	lockMessagesUseCaseMockDeleteMessage.Lock()
	mock.calls.DeleteMessage = append(mock.calls.DeleteMessage, callInfo)
	lockMessagesUseCaseMockDeleteMessage.Unlock()
	return mock.DeleteMessageFunc(messageID, userID)
}

// DeleteMessageCalls gets all the calls that were made to DeleteMessage.
// Check the length with:
//     len(mockedMessagesUseCase.DeleteMessageCalls())
func (mock *MessagesUseCaseMock) DeleteMessageCalls() []struct {
	MessageID uint64
	UserID    uint64
} {
	var calls []struct {
		MessageID uint64
		UserID    uint64
	}
	lockMessagesUseCaseMockDeleteMessage.RLock()
	calls = mock.calls.DeleteMessage
	lockMessagesUseCaseMockDeleteMessage.RUnlock()
	return calls
}

// EditMessage calls EditMessageFunc.
func (mock *MessagesUseCaseMock) EditMessage(message *models.Message, userID uint64) error {
	if mock.EditMessageFunc == nil {
		panic("MessagesUseCaseMock.EditMessageFunc: method is nil but MessagesUseCase.EditMessage was just called")
	}
	callInfo := struct {
		Message *models.Message
		UserID  uint64
	}{
		Message: message,
		UserID:  userID,
	}
	lockMessagesUseCaseMockEditMessage.Lock()
	mock.calls.EditMessage = append(mock.calls.EditMessage, callInfo)
	lockMessagesUseCaseMockEditMessage.Unlock()
	return mock.EditMessageFunc(message, userID)
}

// EditMessageCalls gets all the calls that were made to EditMessage.
// Check the length with:
//     len(mockedMessagesUseCase.EditMessageCalls())
func (mock *MessagesUseCaseMock) EditMessageCalls() []struct {
	Message *models.Message
	UserID  uint64
} {
	var calls []struct {
		Message *models.Message
		UserID  uint64
	}
	lockMessagesUseCaseMockEditMessage.RLock()
	calls = mock.calls.EditMessage
	lockMessagesUseCaseMockEditMessage.RUnlock()
	return calls
}

// FindMessages calls FindMessagesFunc.
func (mock *MessagesUseCaseMock) FindMessages(findString string, ID uint64) (models.Messages, error) {
	if mock.FindMessagesFunc == nil {
		panic("MessagesUseCaseMock.FindMessagesFunc: method is nil but MessagesUseCase.FindMessages was just called")
	}
	callInfo := struct {
		FindString string
		ID         uint64
	}{
		FindString: findString,
		ID:         ID,
	}
	lockMessagesUseCaseMockFindMessages.Lock()
	mock.calls.FindMessages = append(mock.calls.FindMessages, callInfo)
	lockMessagesUseCaseMockFindMessages.Unlock()
	return mock.FindMessagesFunc(findString, ID)
}

// FindMessagesCalls gets all the calls that were made to FindMessages.
// Check the length with:
//     len(mockedMessagesUseCase.FindMessagesCalls())
func (mock *MessagesUseCaseMock) FindMessagesCalls() []struct {
	FindString string
	ID         uint64
} {
	var calls []struct {
		FindString string
		ID         uint64
	}
	lockMessagesUseCaseMockFindMessages.RLock()
	calls = mock.calls.FindMessages
	lockMessagesUseCaseMockFindMessages.RUnlock()
	return calls
}

// GetChannelFile calls GetChannelFileFunc.
func (mock *MessagesUseCaseMock) GetChannelFile(userID uint64, chatID uint64, photoUID string) (*os.File, error) {
	if mock.GetChannelFileFunc == nil {
		panic("MessagesUseCaseMock.GetChannelFileFunc: method is nil but MessagesUseCase.GetChannelFile was just called")
	}
	callInfo := struct {
		UserID   uint64
		ChatID   uint64
		PhotoUID string
	}{
		UserID:   userID,
		ChatID:   chatID,
		PhotoUID: photoUID,
	}
	lockMessagesUseCaseMockGetChannelFile.Lock()
	mock.calls.GetChannelFile = append(mock.calls.GetChannelFile, callInfo)
	lockMessagesUseCaseMockGetChannelFile.Unlock()
	return mock.GetChannelFileFunc(userID, chatID, photoUID)
}

// GetChannelFileCalls gets all the calls that were made to GetChannelFile.
// Check the length with:
//     len(mockedMessagesUseCase.GetChannelFileCalls())
func (mock *MessagesUseCaseMock) GetChannelFileCalls() []struct {
	UserID   uint64
	ChatID   uint64
	PhotoUID string
} {
	var calls []struct {
		UserID   uint64
		ChatID   uint64
		PhotoUID string
	}
	lockMessagesUseCaseMockGetChannelFile.RLock()
	calls = mock.calls.GetChannelFile
	lockMessagesUseCaseMockGetChannelFile.RUnlock()
	return calls
}

// GetChannelMessages calls GetChannelMessagesFunc.
func (mock *MessagesUseCaseMock) GetChannelMessages(channelID uint64, userID uint64) (models.Messages, error) {
	if mock.GetChannelMessagesFunc == nil {
		panic("MessagesUseCaseMock.GetChannelMessagesFunc: method is nil but MessagesUseCase.GetChannelMessages was just called")
	}
	callInfo := struct {
		ChannelID uint64
		UserID    uint64
	}{
		ChannelID: channelID,
		UserID:    userID,
	}
	lockMessagesUseCaseMockGetChannelMessages.Lock()
	mock.calls.GetChannelMessages = append(mock.calls.GetChannelMessages, callInfo)
	lockMessagesUseCaseMockGetChannelMessages.Unlock()
	return mock.GetChannelMessagesFunc(channelID, userID)
}

// GetChannelMessagesCalls gets all the calls that were made to GetChannelMessages.
// Check the length with:
//     len(mockedMessagesUseCase.GetChannelMessagesCalls())
func (mock *MessagesUseCaseMock) GetChannelMessagesCalls() []struct {
	ChannelID uint64
	UserID    uint64
} {
	var calls []struct {
		ChannelID uint64
		UserID    uint64
	}
	lockMessagesUseCaseMockGetChannelMessages.RLock()
	calls = mock.calls.GetChannelMessages
	lockMessagesUseCaseMockGetChannelMessages.RUnlock()
	return calls
}

// GetChatFile calls GetChatFileFunc.
func (mock *MessagesUseCaseMock) GetChatFile(userID uint64, chatID uint64, photoUID string) (*os.File, error) {
	if mock.GetChatFileFunc == nil {
		panic("MessagesUseCaseMock.GetChatFileFunc: method is nil but MessagesUseCase.GetChatFile was just called")
	}
	callInfo := struct {
		UserID   uint64
		ChatID   uint64
		PhotoUID string
	}{
		UserID:   userID,
		ChatID:   chatID,
		PhotoUID: photoUID,
	}
	lockMessagesUseCaseMockGetChatFile.Lock()
	mock.calls.GetChatFile = append(mock.calls.GetChatFile, callInfo)
	lockMessagesUseCaseMockGetChatFile.Unlock()
	return mock.GetChatFileFunc(userID, chatID, photoUID)
}

// GetChatFileCalls gets all the calls that were made to GetChatFile.
// Check the length with:
//     len(mockedMessagesUseCase.GetChatFileCalls())
func (mock *MessagesUseCaseMock) GetChatFileCalls() []struct {
	UserID   uint64
	ChatID   uint64
	PhotoUID string
} {
	var calls []struct {
		UserID   uint64
		ChatID   uint64
		PhotoUID string
	}
	lockMessagesUseCaseMockGetChatFile.RLock()
	calls = mock.calls.GetChatFile
	lockMessagesUseCaseMockGetChatFile.RUnlock()
	return calls
}

// GetChatMessages calls GetChatMessagesFunc.
func (mock *MessagesUseCaseMock) GetChatMessages(chatID uint64, userID uint64) (models.Messages, error) {
	if mock.GetChatMessagesFunc == nil {
		panic("MessagesUseCaseMock.GetChatMessagesFunc: method is nil but MessagesUseCase.GetChatMessages was just called")
	}
	callInfo := struct {
		ChatID uint64
		UserID uint64
	}{
		ChatID: chatID,
		UserID: userID,
	}
	lockMessagesUseCaseMockGetChatMessages.Lock()
	mock.calls.GetChatMessages = append(mock.calls.GetChatMessages, callInfo)
	lockMessagesUseCaseMockGetChatMessages.Unlock()
	return mock.GetChatMessagesFunc(chatID, userID)
}

// GetChatMessagesCalls gets all the calls that were made to GetChatMessages.
// Check the length with:
//     len(mockedMessagesUseCase.GetChatMessagesCalls())
func (mock *MessagesUseCaseMock) GetChatMessagesCalls() []struct {
	ChatID uint64
	UserID uint64
} {
	var calls []struct {
		ChatID uint64
		UserID uint64
	}
	lockMessagesUseCaseMockGetChatMessages.RLock()
	calls = mock.calls.GetChatMessages
	lockMessagesUseCaseMockGetChatMessages.RUnlock()
	return calls
}

// GetMessageByID calls GetMessageByIDFunc.
func (mock *MessagesUseCaseMock) GetMessageByID(messageID uint64) (*models.Message, error) {
	if mock.GetMessageByIDFunc == nil {
		panic("MessagesUseCaseMock.GetMessageByIDFunc: method is nil but MessagesUseCase.GetMessageByID was just called")
	}
	callInfo := struct {
		MessageID uint64
	}{
		MessageID: messageID,
	}
	lockMessagesUseCaseMockGetMessageByID.Lock()
	mock.calls.GetMessageByID = append(mock.calls.GetMessageByID, callInfo)
	lockMessagesUseCaseMockGetMessageByID.Unlock()
	return mock.GetMessageByIDFunc(messageID)
}

// GetMessageByIDCalls gets all the calls that were made to GetMessageByID.
// Check the length with:
//     len(mockedMessagesUseCase.GetMessageByIDCalls())
func (mock *MessagesUseCaseMock) GetMessageByIDCalls() []struct {
	MessageID uint64
} {
	var calls []struct {
		MessageID uint64
	}
	lockMessagesUseCaseMockGetMessageByID.RLock()
	calls = mock.calls.GetMessageByID
	lockMessagesUseCaseMockGetMessageByID.RUnlock()
	return calls
}

// HideMessageForAuthor calls HideMessageForAuthorFunc.
func (mock *MessagesUseCaseMock) HideMessageForAuthor(messageID uint64, userID uint64) error {
	if mock.HideMessageForAuthorFunc == nil {
		panic("MessagesUseCaseMock.HideMessageForAuthorFunc: method is nil but MessagesUseCase.HideMessageForAuthor was just called")
	}
	callInfo := struct {
		MessageID uint64
		UserID    uint64
	}{
		MessageID: messageID,
		UserID:    userID,
	}
	lockMessagesUseCaseMockHideMessageForAuthor.Lock()
	mock.calls.HideMessageForAuthor = append(mock.calls.HideMessageForAuthor, callInfo)
	lockMessagesUseCaseMockHideMessageForAuthor.Unlock()
	return mock.HideMessageForAuthorFunc(messageID, userID)
}

// HideMessageForAuthorCalls gets all the calls that were made to HideMessageForAuthor.
// Check the length with:
//     len(mockedMessagesUseCase.HideMessageForAuthorCalls())
func (mock *MessagesUseCaseMock) HideMessageForAuthorCalls() []struct {
	MessageID uint64
	UserID    uint64
} {
	var calls []struct {
		MessageID uint64
		UserID    uint64
	}
	lockMessagesUseCaseMockHideMessageForAuthor.RLock()
	calls = mock.calls.HideMessageForAuthor
	lockMessagesUseCaseMockHideMessageForAuthor.RUnlock()
	return calls
}

// Like calls LikeFunc.
func (mock *MessagesUseCaseMock) Like(ID uint64) error {
	if mock.LikeFunc == nil {
		panic("MessagesUseCaseMock.LikeFunc: method is nil but MessagesUseCase.Like was just called")
	}
	callInfo := struct {
		ID uint64
	}{
		ID: ID,
	}
	lockMessagesUseCaseMockLike.Lock()
	mock.calls.Like = append(mock.calls.Like, callInfo)
	lockMessagesUseCaseMockLike.Unlock()
	return mock.LikeFunc(ID)
}

// LikeCalls gets all the calls that were made to Like.
// Check the length with:
//     len(mockedMessagesUseCase.LikeCalls())
func (mock *MessagesUseCaseMock) LikeCalls() []struct {
	ID uint64
} {
	var calls []struct {
		ID uint64
	}
	lockMessagesUseCaseMockLike.RLock()
	calls = mock.calls.Like
	lockMessagesUseCaseMockLike.RUnlock()
	return calls
}

// SaveChannelFile calls SaveChannelFileFunc.
func (mock *MessagesUseCaseMock) SaveChannelFile(userID uint64, chatID uint64, file models.File) (string, error) {
	if mock.SaveChannelFileFunc == nil {
		panic("MessagesUseCaseMock.SaveChannelFileFunc: method is nil but MessagesUseCase.SaveChannelFile was just called")
	}
	callInfo := struct {
		UserID uint64
		ChatID uint64
		File   models.File
	}{
		UserID: userID,
		ChatID: chatID,
		File:   file,
	}
	lockMessagesUseCaseMockSaveChannelFile.Lock()
	mock.calls.SaveChannelFile = append(mock.calls.SaveChannelFile, callInfo)
	lockMessagesUseCaseMockSaveChannelFile.Unlock()
	return mock.SaveChannelFileFunc(userID, chatID, file)
}

// SaveChannelFileCalls gets all the calls that were made to SaveChannelFile.
// Check the length with:
//     len(mockedMessagesUseCase.SaveChannelFileCalls())
func (mock *MessagesUseCaseMock) SaveChannelFileCalls() []struct {
	UserID uint64
	ChatID uint64
	File   models.File
} {
	var calls []struct {
		UserID uint64
		ChatID uint64
		File   models.File
	}
	lockMessagesUseCaseMockSaveChannelFile.RLock()
	calls = mock.calls.SaveChannelFile
	lockMessagesUseCaseMockSaveChannelFile.RUnlock()
	return calls
}

// SaveChannelMessage calls SaveChannelMessageFunc.
func (mock *MessagesUseCaseMock) SaveChannelMessage(message *models.Message) (uint64, error) {
	if mock.SaveChannelMessageFunc == nil {
		panic("MessagesUseCaseMock.SaveChannelMessageFunc: method is nil but MessagesUseCase.SaveChannelMessage was just called")
	}
	callInfo := struct {
		Message *models.Message
	}{
		Message: message,
	}
	lockMessagesUseCaseMockSaveChannelMessage.Lock()
	mock.calls.SaveChannelMessage = append(mock.calls.SaveChannelMessage, callInfo)
	lockMessagesUseCaseMockSaveChannelMessage.Unlock()
	return mock.SaveChannelMessageFunc(message)
}

// SaveChannelMessageCalls gets all the calls that were made to SaveChannelMessage.
// Check the length with:
//     len(mockedMessagesUseCase.SaveChannelMessageCalls())
func (mock *MessagesUseCaseMock) SaveChannelMessageCalls() []struct {
	Message *models.Message
} {
	var calls []struct {
		Message *models.Message
	}
	lockMessagesUseCaseMockSaveChannelMessage.RLock()
	calls = mock.calls.SaveChannelMessage
	lockMessagesUseCaseMockSaveChannelMessage.RUnlock()
	return calls
}

// SaveChatFile calls SaveChatFileFunc.
func (mock *MessagesUseCaseMock) SaveChatFile(userID uint64, chatID uint64, file models.File) (string, error) {
	if mock.SaveChatFileFunc == nil {
		panic("MessagesUseCaseMock.SaveChatFileFunc: method is nil but MessagesUseCase.SaveChatFile was just called")
	}
	callInfo := struct {
		UserID uint64
		ChatID uint64
		File   models.File
	}{
		UserID: userID,
		ChatID: chatID,
		File:   file,
	}
	lockMessagesUseCaseMockSaveChatFile.Lock()
	mock.calls.SaveChatFile = append(mock.calls.SaveChatFile, callInfo)
	lockMessagesUseCaseMockSaveChatFile.Unlock()
	return mock.SaveChatFileFunc(userID, chatID, file)
}

// SaveChatFileCalls gets all the calls that were made to SaveChatFile.
// Check the length with:
//     len(mockedMessagesUseCase.SaveChatFileCalls())
func (mock *MessagesUseCaseMock) SaveChatFileCalls() []struct {
	UserID uint64
	ChatID uint64
	File   models.File
} {
	var calls []struct {
		UserID uint64
		ChatID uint64
		File   models.File
	}
	lockMessagesUseCaseMockSaveChatFile.RLock()
	calls = mock.calls.SaveChatFile
	lockMessagesUseCaseMockSaveChatFile.RUnlock()
	return calls
}

// SaveChatMessage calls SaveChatMessageFunc.
func (mock *MessagesUseCaseMock) SaveChatMessage(message *models.Message) (uint64, error) {
	if mock.SaveChatMessageFunc == nil {
		panic("MessagesUseCaseMock.SaveChatMessageFunc: method is nil but MessagesUseCase.SaveChatMessage was just called")
	}
	callInfo := struct {
		Message *models.Message
	}{
		Message: message,
	}
	lockMessagesUseCaseMockSaveChatMessage.Lock()
	mock.calls.SaveChatMessage = append(mock.calls.SaveChatMessage, callInfo)
	lockMessagesUseCaseMockSaveChatMessage.Unlock()
	return mock.SaveChatMessageFunc(message)
}

// SaveChatMessageCalls gets all the calls that were made to SaveChatMessage.
// Check the length with:
//     len(mockedMessagesUseCase.SaveChatMessageCalls())
func (mock *MessagesUseCaseMock) SaveChatMessageCalls() []struct {
	Message *models.Message
} {
	var calls []struct {
		Message *models.Message
	}
	lockMessagesUseCaseMockSaveChatMessage.RLock()
	calls = mock.calls.SaveChatMessage
	lockMessagesUseCaseMockSaveChatMessage.RUnlock()
	return calls
}
