// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package repository

import (
	"github.com/CoolCodeTeam/2019_2_CoolCodeMicroServices/utils/models"
	"sync"
)

var (
	lockNotificationRepositoryMockGetNotificationHub sync.RWMutex
)

// Ensure, that NotificationRepositoryMock does implement NotificationRepository.
// If this is not the case, regenerate this file with moq.
var _ NotificationRepository = &NotificationRepositoryMock{}

// NotificationRepositoryMock is a mock implementation of NotificationRepository.
//
//     func TestSomethingThatUsesNotificationRepository(t *testing.T) {
//
//         // make and configure a mocked NotificationRepository
//         mockedNotificationRepository := &NotificationRepositoryMock{
//             GetNotificationHubFunc: func(chatID uint64) *models.WebSocketHub {
// 	               panic("mock out the GetNotificationHub method")
//             },
//         }
//
//         // use mockedNotificationRepository in code that requires NotificationRepository
//         // and then make assertions.
//
//     }
type NotificationRepositoryMock struct {
	// GetNotificationHubFunc mocks the GetNotificationHub method.
	GetNotificationHubFunc func(chatID uint64) *models.WebSocketHub

	// calls tracks calls to the methods.
	calls struct {
		// GetNotificationHub holds details about calls to the GetNotificationHub method.
		GetNotificationHub []struct {
			// ChatID is the chatID argument value.
			ChatID uint64
		}
	}
}

// GetNotificationHub calls GetNotificationHubFunc.
func (mock *NotificationRepositoryMock) GetNotificationHub(chatID uint64) *models.WebSocketHub {
	if mock.GetNotificationHubFunc == nil {
		panic("NotificationRepositoryMock.GetNotificationHubFunc: method is nil but NotificationRepository.GetNotificationHub was just called")
	}
	callInfo := struct {
		ChatID uint64
	}{
		ChatID: chatID,
	}
	lockNotificationRepositoryMockGetNotificationHub.Lock()
	mock.calls.GetNotificationHub = append(mock.calls.GetNotificationHub, callInfo)
	lockNotificationRepositoryMockGetNotificationHub.Unlock()
	return mock.GetNotificationHubFunc(chatID)
}

// GetNotificationHubCalls gets all the calls that were made to GetNotificationHub.
// Check the length with:
//     len(mockedNotificationRepository.GetNotificationHubCalls())
func (mock *NotificationRepositoryMock) GetNotificationHubCalls() []struct {
	ChatID uint64
} {
	var calls []struct {
		ChatID uint64
	}
	lockNotificationRepositoryMockGetNotificationHub.RLock()
	calls = mock.calls.GetNotificationHub
	lockNotificationRepositoryMockGetNotificationHub.RUnlock()
	return calls
}
