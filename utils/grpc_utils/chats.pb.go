// Code generated by protoc-gen-go. DO NOT EDIT.
// source: chats.proto

package grpc_utils

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type RequestMessage struct {
	UserID               uint64     `protobuf:"varint,1,opt,name=userID,proto3" json:"userID,omitempty"`
	ChatID               uint64     `protobuf:"varint,2,opt,name=chatID,proto3" json:"chatID,omitempty"`
	Workspace            *Workspace `protobuf:"bytes,3,opt,name=workspace,proto3" json:"workspace,omitempty"`
	Channel              *Channel   `protobuf:"bytes,4,opt,name=channel,proto3" json:"channel,omitempty"`
	Chat                 *Chat      `protobuf:"bytes,5,opt,name=chat,proto3" json:"chat,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *RequestMessage) Reset()         { *m = RequestMessage{} }
func (m *RequestMessage) String() string { return proto.CompactTextString(m) }
func (*RequestMessage) ProtoMessage()    {}
func (*RequestMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_a05cf9748eb56a00, []int{0}
}

func (m *RequestMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RequestMessage.Unmarshal(m, b)
}
func (m *RequestMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RequestMessage.Marshal(b, m, deterministic)
}
func (m *RequestMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestMessage.Merge(m, src)
}
func (m *RequestMessage) XXX_Size() int {
	return xxx_messageInfo_RequestMessage.Size(m)
}
func (m *RequestMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestMessage.DiscardUnknown(m)
}

var xxx_messageInfo_RequestMessage proto.InternalMessageInfo

func (m *RequestMessage) GetUserID() uint64 {
	if m != nil {
		return m.UserID
	}
	return 0
}

func (m *RequestMessage) GetChatID() uint64 {
	if m != nil {
		return m.ChatID
	}
	return 0
}

func (m *RequestMessage) GetWorkspace() *Workspace {
	if m != nil {
		return m.Workspace
	}
	return nil
}

func (m *RequestMessage) GetChannel() *Channel {
	if m != nil {
		return m.Channel
	}
	return nil
}

func (m *RequestMessage) GetChat() *Chat {
	if m != nil {
		return m.Chat
	}
	return nil
}

type ResponseMessage struct {
	Ok                   bool         `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	Number               uint64       `protobuf:"varint,2,opt,name=number,proto3" json:"number,omitempty"`
	Chats                []*Chat      `protobuf:"bytes,3,rep,name=chats,proto3" json:"chats,omitempty"`
	Workspaces           []*Workspace `protobuf:"bytes,4,rep,name=workspaces,proto3" json:"workspaces,omitempty"`
	Workspace            *Workspace   `protobuf:"bytes,5,opt,name=workspace,proto3" json:"workspace,omitempty"`
	Channel              *Channel     `protobuf:"bytes,6,opt,name=channel,proto3" json:"channel,omitempty"`
	Chat                 *Chat        `protobuf:"bytes,7,opt,name=chat,proto3" json:"chat,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *ResponseMessage) Reset()         { *m = ResponseMessage{} }
func (m *ResponseMessage) String() string { return proto.CompactTextString(m) }
func (*ResponseMessage) ProtoMessage()    {}
func (*ResponseMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_a05cf9748eb56a00, []int{1}
}

func (m *ResponseMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResponseMessage.Unmarshal(m, b)
}
func (m *ResponseMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResponseMessage.Marshal(b, m, deterministic)
}
func (m *ResponseMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResponseMessage.Merge(m, src)
}
func (m *ResponseMessage) XXX_Size() int {
	return xxx_messageInfo_ResponseMessage.Size(m)
}
func (m *ResponseMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_ResponseMessage.DiscardUnknown(m)
}

var xxx_messageInfo_ResponseMessage proto.InternalMessageInfo

func (m *ResponseMessage) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *ResponseMessage) GetNumber() uint64 {
	if m != nil {
		return m.Number
	}
	return 0
}

func (m *ResponseMessage) GetChats() []*Chat {
	if m != nil {
		return m.Chats
	}
	return nil
}

func (m *ResponseMessage) GetWorkspaces() []*Workspace {
	if m != nil {
		return m.Workspaces
	}
	return nil
}

func (m *ResponseMessage) GetWorkspace() *Workspace {
	if m != nil {
		return m.Workspace
	}
	return nil
}

func (m *ResponseMessage) GetChannel() *Channel {
	if m != nil {
		return m.Channel
	}
	return nil
}

func (m *ResponseMessage) GetChat() *Chat {
	if m != nil {
		return m.Chat
	}
	return nil
}

type EmptyChats struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EmptyChats) Reset()         { *m = EmptyChats{} }
func (m *EmptyChats) String() string { return proto.CompactTextString(m) }
func (*EmptyChats) ProtoMessage()    {}
func (*EmptyChats) Descriptor() ([]byte, []int) {
	return fileDescriptor_a05cf9748eb56a00, []int{2}
}

func (m *EmptyChats) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EmptyChats.Unmarshal(m, b)
}
func (m *EmptyChats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EmptyChats.Marshal(b, m, deterministic)
}
func (m *EmptyChats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EmptyChats.Merge(m, src)
}
func (m *EmptyChats) XXX_Size() int {
	return xxx_messageInfo_EmptyChats.Size(m)
}
func (m *EmptyChats) XXX_DiscardUnknown() {
	xxx_messageInfo_EmptyChats.DiscardUnknown(m)
}

var xxx_messageInfo_EmptyChats proto.InternalMessageInfo

type Bool struct {
	Ok                   bool     `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Bool) Reset()         { *m = Bool{} }
func (m *Bool) String() string { return proto.CompactTextString(m) }
func (*Bool) ProtoMessage()    {}
func (*Bool) Descriptor() ([]byte, []int) {
	return fileDescriptor_a05cf9748eb56a00, []int{3}
}

func (m *Bool) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Bool.Unmarshal(m, b)
}
func (m *Bool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Bool.Marshal(b, m, deterministic)
}
func (m *Bool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Bool.Merge(m, src)
}
func (m *Bool) XXX_Size() int {
	return xxx_messageInfo_Bool.Size(m)
}
func (m *Bool) XXX_DiscardUnknown() {
	xxx_messageInfo_Bool.DiscardUnknown(m)
}

var xxx_messageInfo_Bool proto.InternalMessageInfo

func (m *Bool) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

type Chat struct {
	ID                   uint64   `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	TotalMSGCount        int64    `protobuf:"varint,3,opt,name=TotalMSGCount,proto3" json:"TotalMSGCount,omitempty"`
	Members              []uint64 `protobuf:"varint,4,rep,packed,name=members,proto3" json:"members,omitempty"`
	LastMessage          string   `protobuf:"bytes,5,opt,name=LastMessage,proto3" json:"LastMessage,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Chat) Reset()         { *m = Chat{} }
func (m *Chat) String() string { return proto.CompactTextString(m) }
func (*Chat) ProtoMessage()    {}
func (*Chat) Descriptor() ([]byte, []int) {
	return fileDescriptor_a05cf9748eb56a00, []int{4}
}

func (m *Chat) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Chat.Unmarshal(m, b)
}
func (m *Chat) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Chat.Marshal(b, m, deterministic)
}
func (m *Chat) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Chat.Merge(m, src)
}
func (m *Chat) XXX_Size() int {
	return xxx_messageInfo_Chat.Size(m)
}
func (m *Chat) XXX_DiscardUnknown() {
	xxx_messageInfo_Chat.DiscardUnknown(m)
}

var xxx_messageInfo_Chat proto.InternalMessageInfo

func (m *Chat) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Chat) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Chat) GetTotalMSGCount() int64 {
	if m != nil {
		return m.TotalMSGCount
	}
	return 0
}

func (m *Chat) GetMembers() []uint64 {
	if m != nil {
		return m.Members
	}
	return nil
}

func (m *Chat) GetLastMessage() string {
	if m != nil {
		return m.LastMessage
	}
	return ""
}

type Chats struct {
	Chats                []*Chat  `protobuf:"bytes,1,rep,name=chats,proto3" json:"chats,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Chats) Reset()         { *m = Chats{} }
func (m *Chats) String() string { return proto.CompactTextString(m) }
func (*Chats) ProtoMessage()    {}
func (*Chats) Descriptor() ([]byte, []int) {
	return fileDescriptor_a05cf9748eb56a00, []int{5}
}

func (m *Chats) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Chats.Unmarshal(m, b)
}
func (m *Chats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Chats.Marshal(b, m, deterministic)
}
func (m *Chats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Chats.Merge(m, src)
}
func (m *Chats) XXX_Size() int {
	return xxx_messageInfo_Chats.Size(m)
}
func (m *Chats) XXX_DiscardUnknown() {
	xxx_messageInfo_Chats.DiscardUnknown(m)
}

var xxx_messageInfo_Chats proto.InternalMessageInfo

func (m *Chats) GetChats() []*Chat {
	if m != nil {
		return m.Chats
	}
	return nil
}

type Channel struct {
	ID                   uint64   `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	TotalMSGCount        int64    `protobuf:"varint,3,opt,name=TotalMSGCount,proto3" json:"TotalMSGCount,omitempty"`
	Members              []uint64 `protobuf:"varint,4,rep,packed,name=members,proto3" json:"members,omitempty"`
	Admins               []uint64 `protobuf:"varint,5,rep,packed,name=admins,proto3" json:"admins,omitempty"`
	WorkspaceID          uint64   `protobuf:"varint,6,opt,name=workspaceID,proto3" json:"workspaceID,omitempty"`
	CreatorID            uint64   `protobuf:"varint,7,opt,name=creatorID,proto3" json:"creatorID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Channel) Reset()         { *m = Channel{} }
func (m *Channel) String() string { return proto.CompactTextString(m) }
func (*Channel) ProtoMessage()    {}
func (*Channel) Descriptor() ([]byte, []int) {
	return fileDescriptor_a05cf9748eb56a00, []int{6}
}

func (m *Channel) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Channel.Unmarshal(m, b)
}
func (m *Channel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Channel.Marshal(b, m, deterministic)
}
func (m *Channel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Channel.Merge(m, src)
}
func (m *Channel) XXX_Size() int {
	return xxx_messageInfo_Channel.Size(m)
}
func (m *Channel) XXX_DiscardUnknown() {
	xxx_messageInfo_Channel.DiscardUnknown(m)
}

var xxx_messageInfo_Channel proto.InternalMessageInfo

func (m *Channel) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Channel) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Channel) GetTotalMSGCount() int64 {
	if m != nil {
		return m.TotalMSGCount
	}
	return 0
}

func (m *Channel) GetMembers() []uint64 {
	if m != nil {
		return m.Members
	}
	return nil
}

func (m *Channel) GetAdmins() []uint64 {
	if m != nil {
		return m.Admins
	}
	return nil
}

func (m *Channel) GetWorkspaceID() uint64 {
	if m != nil {
		return m.WorkspaceID
	}
	return 0
}

func (m *Channel) GetCreatorID() uint64 {
	if m != nil {
		return m.CreatorID
	}
	return 0
}

type Workspace struct {
	ID                   uint64     `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Name                 string     `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Channels             []*Channel `protobuf:"bytes,3,rep,name=channels,proto3" json:"channels,omitempty"`
	Members              []uint64   `protobuf:"varint,4,rep,packed,name=members,proto3" json:"members,omitempty"`
	Admins               []uint64   `protobuf:"varint,5,rep,packed,name=admins,proto3" json:"admins,omitempty"`
	CreatorID            uint64     `protobuf:"varint,6,opt,name=creatorID,proto3" json:"creatorID,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *Workspace) Reset()         { *m = Workspace{} }
func (m *Workspace) String() string { return proto.CompactTextString(m) }
func (*Workspace) ProtoMessage()    {}
func (*Workspace) Descriptor() ([]byte, []int) {
	return fileDescriptor_a05cf9748eb56a00, []int{7}
}

func (m *Workspace) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Workspace.Unmarshal(m, b)
}
func (m *Workspace) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Workspace.Marshal(b, m, deterministic)
}
func (m *Workspace) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Workspace.Merge(m, src)
}
func (m *Workspace) XXX_Size() int {
	return xxx_messageInfo_Workspace.Size(m)
}
func (m *Workspace) XXX_DiscardUnknown() {
	xxx_messageInfo_Workspace.DiscardUnknown(m)
}

var xxx_messageInfo_Workspace proto.InternalMessageInfo

func (m *Workspace) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Workspace) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Workspace) GetChannels() []*Channel {
	if m != nil {
		return m.Channels
	}
	return nil
}

func (m *Workspace) GetMembers() []uint64 {
	if m != nil {
		return m.Members
	}
	return nil
}

func (m *Workspace) GetAdmins() []uint64 {
	if m != nil {
		return m.Admins
	}
	return nil
}

func (m *Workspace) GetCreatorID() uint64 {
	if m != nil {
		return m.CreatorID
	}
	return 0
}

type Workspaces struct {
	Workspaces           []*Workspace `protobuf:"bytes,1,rep,name=workspaces,proto3" json:"workspaces,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *Workspaces) Reset()         { *m = Workspaces{} }
func (m *Workspaces) String() string { return proto.CompactTextString(m) }
func (*Workspaces) ProtoMessage()    {}
func (*Workspaces) Descriptor() ([]byte, []int) {
	return fileDescriptor_a05cf9748eb56a00, []int{8}
}

func (m *Workspaces) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Workspaces.Unmarshal(m, b)
}
func (m *Workspaces) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Workspaces.Marshal(b, m, deterministic)
}
func (m *Workspaces) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Workspaces.Merge(m, src)
}
func (m *Workspaces) XXX_Size() int {
	return xxx_messageInfo_Workspaces.Size(m)
}
func (m *Workspaces) XXX_DiscardUnknown() {
	xxx_messageInfo_Workspaces.DiscardUnknown(m)
}

var xxx_messageInfo_Workspaces proto.InternalMessageInfo

func (m *Workspaces) GetWorkspaces() []*Workspace {
	if m != nil {
		return m.Workspaces
	}
	return nil
}

func init() {
	proto.RegisterType((*RequestMessage)(nil), "grpc_utils.RequestMessage")
	proto.RegisterType((*ResponseMessage)(nil), "grpc_utils.ResponseMessage")
	proto.RegisterType((*EmptyChats)(nil), "grpc_utils.EmptyChats")
	proto.RegisterType((*Bool)(nil), "grpc_utils.Bool")
	proto.RegisterType((*Chat)(nil), "grpc_utils.Chat")
	proto.RegisterType((*Chats)(nil), "grpc_utils.Chats")
	proto.RegisterType((*Channel)(nil), "grpc_utils.Channel")
	proto.RegisterType((*Workspace)(nil), "grpc_utils.Workspace")
	proto.RegisterType((*Workspaces)(nil), "grpc_utils.Workspaces")
}

func init() { proto.RegisterFile("chats.proto", fileDescriptor_a05cf9748eb56a00) }

var fileDescriptor_a05cf9748eb56a00 = []byte{
	// 671 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x56, 0xcd, 0x4e, 0xdb, 0x4c,
	0x14, 0x95, 0x13, 0x27, 0x21, 0x27, 0x04, 0xf8, 0x06, 0x11, 0x59, 0x7c, 0x5d, 0x44, 0x16, 0xaa,
	0xd8, 0x14, 0x24, 0x68, 0xa5, 0x2e, 0x0b, 0x4e, 0x40, 0x56, 0x01, 0x51, 0xd3, 0x8a, 0x65, 0x65,
	0xcc, 0x08, 0xa2, 0xc4, 0x9e, 0xd4, 0x33, 0x6e, 0xc5, 0x3b, 0x74, 0xd9, 0x27, 0xe8, 0x13, 0xf4,
	0x25, 0xba, 0xe9, 0x53, 0x55, 0x33, 0x8e, 0xff, 0x42, 0x88, 0xc0, 0x41, 0xdd, 0x65, 0xee, 0xbd,
	0x73, 0x7c, 0xcf, 0xb9, 0xe7, 0x8e, 0x82, 0x96, 0x77, 0xeb, 0x0a, 0xbe, 0x33, 0x0e, 0x99, 0x60,
	0x04, 0x37, 0xe1, 0xd8, 0xfb, 0x1c, 0x89, 0xc1, 0x88, 0x9b, 0x7f, 0x34, 0xac, 0x38, 0xf4, 0x4b,
	0x44, 0xb9, 0x38, 0xa5, 0x9c, 0xbb, 0x37, 0x94, 0x74, 0x50, 0x8f, 0x38, 0x0d, 0xed, 0x9e, 0xa1,
	0x75, 0xb5, 0x6d, 0xdd, 0x99, 0x9c, 0x64, 0x5c, 0xa2, 0xd8, 0x3d, 0xa3, 0x12, 0xc7, 0xe3, 0x13,
	0xd9, 0x47, 0xf3, 0x1b, 0x0b, 0x87, 0x7c, 0xec, 0x7a, 0xd4, 0xa8, 0x76, 0xb5, 0xed, 0xd6, 0xde,
	0xc6, 0x4e, 0xf6, 0x89, 0x9d, 0xcb, 0x24, 0xe9, 0x64, 0x75, 0xe4, 0x15, 0x1a, 0xde, 0xad, 0x1b,
	0x04, 0x74, 0x64, 0xe8, 0xea, 0xca, 0x7a, 0xfe, 0x8a, 0x15, 0xa7, 0x9c, 0xa4, 0x86, 0x6c, 0x41,
	0x97, 0x5f, 0x33, 0x6a, 0xaa, 0x76, 0x6d, 0xaa, 0x56, 0x38, 0x2a, 0x6b, 0xfe, 0xac, 0x60, 0xd5,
	0xa1, 0x7c, 0xcc, 0x02, 0x4e, 0x13, 0x36, 0x2b, 0xa8, 0xb0, 0xa1, 0x62, 0xb2, 0xe4, 0x54, 0xd8,
	0x50, 0xb2, 0x08, 0x22, 0xff, 0x8a, 0x86, 0x09, 0x8b, 0xf8, 0x44, 0x5e, 0xa2, 0xa6, 0x34, 0x32,
	0xaa, 0xdd, 0xea, 0xcc, 0x4f, 0xc4, 0x69, 0xf2, 0x06, 0x48, 0x59, 0x70, 0x43, 0x57, 0xc5, 0x0f,
	0xd0, 0xcd, 0x15, 0x16, 0x45, 0xaa, 0x3d, 0x5d, 0xa4, 0xfa, 0x13, 0x44, 0x6a, 0xcc, 0x15, 0x69,
	0x19, 0xe8, 0xfb, 0x63, 0x71, 0x27, 0x43, 0xdc, 0xec, 0x40, 0x3f, 0x64, 0x6c, 0x34, 0x2d, 0x93,
	0xf9, 0x5d, 0x83, 0x2e, 0x2b, 0x64, 0x22, 0x75, 0x42, 0xc5, 0xee, 0x11, 0x02, 0xfd, 0xcc, 0xf5,
	0xa9, 0x52, 0xaf, 0xe9, 0xa8, 0xdf, 0x64, 0x0b, 0xed, 0x8f, 0x4c, 0xb8, 0xa3, 0xd3, 0x8b, 0x63,
	0x8b, 0x45, 0x81, 0x50, 0x2e, 0xa8, 0x3a, 0xc5, 0x20, 0x31, 0xd0, 0xf0, 0xa9, 0xd4, 0x3a, 0x96,
	0x4d, 0x77, 0x92, 0x23, 0xe9, 0xa2, 0x75, 0xe2, 0xa6, 0x06, 0x54, 0xf2, 0x34, 0x9d, 0x7c, 0xc8,
	0xdc, 0x45, 0x4d, 0xf5, 0x9b, 0x8d, 0x49, 0x9b, 0x3b, 0x26, 0xf3, 0xb7, 0x86, 0xc6, 0x44, 0xa0,
	0x7f, 0x42, 0xa1, 0x83, 0xba, 0x7b, 0xed, 0x0f, 0x02, 0x6e, 0xd4, 0x54, 0x62, 0x72, 0x92, 0xd4,
	0xd2, 0x79, 0xda, 0x3d, 0x35, 0x46, 0xdd, 0xc9, 0x87, 0xc8, 0x0b, 0x34, 0xbd, 0x90, 0xba, 0x82,
	0xc9, 0x8d, 0x6b, 0xa8, 0x7c, 0x16, 0x30, 0x7f, 0x69, 0x68, 0xa6, 0xde, 0x78, 0x14, 0x93, 0x5d,
	0x2c, 0x4d, 0x0c, 0x91, 0x78, 0x79, 0xa6, 0x6b, 0xd2, 0xa2, 0x12, 0xa4, 0x0a, 0x2d, 0xd7, 0xa7,
	0x5b, 0xb6, 0x80, 0xcb, 0xcc, 0xf8, 0xc5, 0x7d, 0xd1, 0x1e, 0xb9, 0x2f, 0x7b, 0x3f, 0x80, 0x65,
	0x35, 0xf1, 0x0b, 0x1a, 0x7e, 0x1d, 0x78, 0x94, 0x9c, 0x61, 0xdd, 0xba, 0xa5, 0xde, 0x50, 0x06,
	0xcf, 0x69, 0xe8, 0x0f, 0x38, 0x1f, 0xb0, 0x80, 0x6c, 0xe6, 0xa1, 0x8a, 0x0f, 0xd9, 0xe6, 0xff,
	0xc5, 0x5c, 0xf1, 0x5d, 0xf8, 0x80, 0x4e, 0x82, 0x27, 0x65, 0x78, 0x0e, 0xc8, 0x23, 0xb4, 0x8e,
	0xa9, 0x90, 0x0d, 0x1e, 0xde, 0xd9, 0xbd, 0xf2, 0x38, 0xef, 0xb1, 0x36, 0xc1, 0xe1, 0x87, 0x77,
	0x9f, 0xe2, 0xc7, 0xb7, 0x34, 0xd8, 0x5b, 0x34, 0xce, 0x23, 0x05, 0x46, 0xee, 0x2d, 0xcb, 0xfc,
	0x9b, 0xaf, 0xb1, 0x64, 0xb1, 0x40, 0xb8, 0x72, 0xe2, 0xf7, 0xaf, 0x76, 0xf2, 0x91, 0xec, 0x41,
	0x99, 0x34, 0x9f, 0x0e, 0x75, 0x31, 0x25, 0xce, 0xb1, 0x91, 0x07, 0x7b, 0x06, 0x39, 0xfa, 0x58,
	0xb5, 0xa4, 0x53, 0x69, 0xb6, 0x54, 0xb3, 0xdd, 0x38, 0x1f, 0xe6, 0x00, 0xed, 0x18, 0x26, 0x79,
	0x63, 0x66, 0xed, 0xd8, 0x7c, 0x08, 0x1b, 0x2b, 0xf1, 0x94, 0x65, 0xe9, 0x62, 0x32, 0x59, 0x68,
	0xf7, 0xaf, 0x07, 0x99, 0x4e, 0x73, 0x91, 0x1e, 0x1a, 0xdc, 0x01, 0x5a, 0x12, 0x24, 0x21, 0x54,
	0x06, 0xc2, 0xc6, 0xfa, 0x09, 0xbb, 0x61, 0x91, 0x38, 0x0a, 0x99, 0xbf, 0x58, 0x37, 0xc7, 0xf8,
	0x2f, 0x83, 0x5a, 0xa4, 0xa7, 0x3e, 0x56, 0x7b, 0x74, 0x44, 0xf3, 0x03, 0x2f, 0x03, 0x63, 0xa1,
	0x1d, 0xc3, 0x2c, 0xd2, 0xcb, 0x3b, 0x20, 0x05, 0x11, 0x65, 0x10, 0xae, 0xea, 0xea, 0x1f, 0xdc,
	0xfe, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xd5, 0xe6, 0xb6, 0xbf, 0xd0, 0x09, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ChatsServiceClient is the client API for ChatsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ChatsServiceClient interface {
	CheckChatPermission(ctx context.Context, in *RequestMessage, opts ...grpc.CallOption) (*ResponseMessage, error)
	CheckChannelPermission(ctx context.Context, in *RequestMessage, opts ...grpc.CallOption) (*ResponseMessage, error)
	GetChatByID(ctx context.Context, in *RequestMessage, opts ...grpc.CallOption) (*ResponseMessage, error)
	GetChatsByUserID(ctx context.Context, in *RequestMessage, opts ...grpc.CallOption) (*ResponseMessage, error)
	PutChat(ctx context.Context, in *Chat, opts ...grpc.CallOption) (*ResponseMessage, error)
	Contains(ctx context.Context, in *Chat, opts ...grpc.CallOption) (*EmptyChats, error)
	GetWorkspaceByID(ctx context.Context, in *RequestMessage, opts ...grpc.CallOption) (*ResponseMessage, error)
	GetWorkspacesByUserID(ctx context.Context, in *RequestMessage, opts ...grpc.CallOption) (*ResponseMessage, error)
	CreateWorkspace(ctx context.Context, in *Workspace, opts ...grpc.CallOption) (*ResponseMessage, error)
	CreateChannel(ctx context.Context, in *Channel, opts ...grpc.CallOption) (*ResponseMessage, error)
	GetChannelByID(ctx context.Context, in *RequestMessage, opts ...grpc.CallOption) (*ResponseMessage, error)
	EditWorkspace(ctx context.Context, in *RequestMessage, opts ...grpc.CallOption) (*EmptyChats, error)
	EditChannel(ctx context.Context, in *RequestMessage, opts ...grpc.CallOption) (*EmptyChats, error)
	LogoutFromWorkspace(ctx context.Context, in *RequestMessage, opts ...grpc.CallOption) (*EmptyChats, error)
	LogoutFromChannel(ctx context.Context, in *RequestMessage, opts ...grpc.CallOption) (*EmptyChats, error)
	DeleteWorkspace(ctx context.Context, in *RequestMessage, opts ...grpc.CallOption) (*EmptyChats, error)
	DeleteChannel(ctx context.Context, in *RequestMessage, opts ...grpc.CallOption) (*EmptyChats, error)
	DeleteChat(ctx context.Context, in *RequestMessage, opts ...grpc.CallOption) (*EmptyChats, error)
}

type chatsServiceClient struct {
	cc *grpc.ClientConn
}

func NewChatsServiceClient(cc *grpc.ClientConn) ChatsServiceClient {
	return &chatsServiceClient{cc}
}

func (c *chatsServiceClient) CheckChatPermission(ctx context.Context, in *RequestMessage, opts ...grpc.CallOption) (*ResponseMessage, error) {
	out := new(ResponseMessage)
	err := c.cc.Invoke(ctx, "/grpc_utils.ChatsService/CheckChatPermission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatsServiceClient) CheckChannelPermission(ctx context.Context, in *RequestMessage, opts ...grpc.CallOption) (*ResponseMessage, error) {
	out := new(ResponseMessage)
	err := c.cc.Invoke(ctx, "/grpc_utils.ChatsService/CheckChannelPermission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatsServiceClient) GetChatByID(ctx context.Context, in *RequestMessage, opts ...grpc.CallOption) (*ResponseMessage, error) {
	out := new(ResponseMessage)
	err := c.cc.Invoke(ctx, "/grpc_utils.ChatsService/GetChatByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatsServiceClient) GetChatsByUserID(ctx context.Context, in *RequestMessage, opts ...grpc.CallOption) (*ResponseMessage, error) {
	out := new(ResponseMessage)
	err := c.cc.Invoke(ctx, "/grpc_utils.ChatsService/GetChatsByUserID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatsServiceClient) PutChat(ctx context.Context, in *Chat, opts ...grpc.CallOption) (*ResponseMessage, error) {
	out := new(ResponseMessage)
	err := c.cc.Invoke(ctx, "/grpc_utils.ChatsService/PutChat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatsServiceClient) Contains(ctx context.Context, in *Chat, opts ...grpc.CallOption) (*EmptyChats, error) {
	out := new(EmptyChats)
	err := c.cc.Invoke(ctx, "/grpc_utils.ChatsService/Contains", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatsServiceClient) GetWorkspaceByID(ctx context.Context, in *RequestMessage, opts ...grpc.CallOption) (*ResponseMessage, error) {
	out := new(ResponseMessage)
	err := c.cc.Invoke(ctx, "/grpc_utils.ChatsService/GetWorkspaceByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatsServiceClient) GetWorkspacesByUserID(ctx context.Context, in *RequestMessage, opts ...grpc.CallOption) (*ResponseMessage, error) {
	out := new(ResponseMessage)
	err := c.cc.Invoke(ctx, "/grpc_utils.ChatsService/GetWorkspacesByUserID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatsServiceClient) CreateWorkspace(ctx context.Context, in *Workspace, opts ...grpc.CallOption) (*ResponseMessage, error) {
	out := new(ResponseMessage)
	err := c.cc.Invoke(ctx, "/grpc_utils.ChatsService/CreateWorkspace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatsServiceClient) CreateChannel(ctx context.Context, in *Channel, opts ...grpc.CallOption) (*ResponseMessage, error) {
	out := new(ResponseMessage)
	err := c.cc.Invoke(ctx, "/grpc_utils.ChatsService/CreateChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatsServiceClient) GetChannelByID(ctx context.Context, in *RequestMessage, opts ...grpc.CallOption) (*ResponseMessage, error) {
	out := new(ResponseMessage)
	err := c.cc.Invoke(ctx, "/grpc_utils.ChatsService/GetChannelByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatsServiceClient) EditWorkspace(ctx context.Context, in *RequestMessage, opts ...grpc.CallOption) (*EmptyChats, error) {
	out := new(EmptyChats)
	err := c.cc.Invoke(ctx, "/grpc_utils.ChatsService/EditWorkspace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatsServiceClient) EditChannel(ctx context.Context, in *RequestMessage, opts ...grpc.CallOption) (*EmptyChats, error) {
	out := new(EmptyChats)
	err := c.cc.Invoke(ctx, "/grpc_utils.ChatsService/EditChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatsServiceClient) LogoutFromWorkspace(ctx context.Context, in *RequestMessage, opts ...grpc.CallOption) (*EmptyChats, error) {
	out := new(EmptyChats)
	err := c.cc.Invoke(ctx, "/grpc_utils.ChatsService/LogoutFromWorkspace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatsServiceClient) LogoutFromChannel(ctx context.Context, in *RequestMessage, opts ...grpc.CallOption) (*EmptyChats, error) {
	out := new(EmptyChats)
	err := c.cc.Invoke(ctx, "/grpc_utils.ChatsService/LogoutFromChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatsServiceClient) DeleteWorkspace(ctx context.Context, in *RequestMessage, opts ...grpc.CallOption) (*EmptyChats, error) {
	out := new(EmptyChats)
	err := c.cc.Invoke(ctx, "/grpc_utils.ChatsService/DeleteWorkspace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatsServiceClient) DeleteChannel(ctx context.Context, in *RequestMessage, opts ...grpc.CallOption) (*EmptyChats, error) {
	out := new(EmptyChats)
	err := c.cc.Invoke(ctx, "/grpc_utils.ChatsService/DeleteChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatsServiceClient) DeleteChat(ctx context.Context, in *RequestMessage, opts ...grpc.CallOption) (*EmptyChats, error) {
	out := new(EmptyChats)
	err := c.cc.Invoke(ctx, "/grpc_utils.ChatsService/DeleteChat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChatsServiceServer is the server API for ChatsService service.
type ChatsServiceServer interface {
	CheckChatPermission(context.Context, *RequestMessage) (*ResponseMessage, error)
	CheckChannelPermission(context.Context, *RequestMessage) (*ResponseMessage, error)
	GetChatByID(context.Context, *RequestMessage) (*ResponseMessage, error)
	GetChatsByUserID(context.Context, *RequestMessage) (*ResponseMessage, error)
	PutChat(context.Context, *Chat) (*ResponseMessage, error)
	Contains(context.Context, *Chat) (*EmptyChats, error)
	GetWorkspaceByID(context.Context, *RequestMessage) (*ResponseMessage, error)
	GetWorkspacesByUserID(context.Context, *RequestMessage) (*ResponseMessage, error)
	CreateWorkspace(context.Context, *Workspace) (*ResponseMessage, error)
	CreateChannel(context.Context, *Channel) (*ResponseMessage, error)
	GetChannelByID(context.Context, *RequestMessage) (*ResponseMessage, error)
	EditWorkspace(context.Context, *RequestMessage) (*EmptyChats, error)
	EditChannel(context.Context, *RequestMessage) (*EmptyChats, error)
	LogoutFromWorkspace(context.Context, *RequestMessage) (*EmptyChats, error)
	LogoutFromChannel(context.Context, *RequestMessage) (*EmptyChats, error)
	DeleteWorkspace(context.Context, *RequestMessage) (*EmptyChats, error)
	DeleteChannel(context.Context, *RequestMessage) (*EmptyChats, error)
	DeleteChat(context.Context, *RequestMessage) (*EmptyChats, error)
}

// UnimplementedChatsServiceServer can be embedded to have forward compatible implementations.
type UnimplementedChatsServiceServer struct {
}

func (*UnimplementedChatsServiceServer) CheckChatPermission(ctx context.Context, req *RequestMessage) (*ResponseMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckChatPermission not implemented")
}
func (*UnimplementedChatsServiceServer) CheckChannelPermission(ctx context.Context, req *RequestMessage) (*ResponseMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckChannelPermission not implemented")
}
func (*UnimplementedChatsServiceServer) GetChatByID(ctx context.Context, req *RequestMessage) (*ResponseMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChatByID not implemented")
}
func (*UnimplementedChatsServiceServer) GetChatsByUserID(ctx context.Context, req *RequestMessage) (*ResponseMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChatsByUserID not implemented")
}
func (*UnimplementedChatsServiceServer) PutChat(ctx context.Context, req *Chat) (*ResponseMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutChat not implemented")
}
func (*UnimplementedChatsServiceServer) Contains(ctx context.Context, req *Chat) (*EmptyChats, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Contains not implemented")
}
func (*UnimplementedChatsServiceServer) GetWorkspaceByID(ctx context.Context, req *RequestMessage) (*ResponseMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkspaceByID not implemented")
}
func (*UnimplementedChatsServiceServer) GetWorkspacesByUserID(ctx context.Context, req *RequestMessage) (*ResponseMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkspacesByUserID not implemented")
}
func (*UnimplementedChatsServiceServer) CreateWorkspace(ctx context.Context, req *Workspace) (*ResponseMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWorkspace not implemented")
}
func (*UnimplementedChatsServiceServer) CreateChannel(ctx context.Context, req *Channel) (*ResponseMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateChannel not implemented")
}
func (*UnimplementedChatsServiceServer) GetChannelByID(ctx context.Context, req *RequestMessage) (*ResponseMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChannelByID not implemented")
}
func (*UnimplementedChatsServiceServer) EditWorkspace(ctx context.Context, req *RequestMessage) (*EmptyChats, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditWorkspace not implemented")
}
func (*UnimplementedChatsServiceServer) EditChannel(ctx context.Context, req *RequestMessage) (*EmptyChats, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditChannel not implemented")
}
func (*UnimplementedChatsServiceServer) LogoutFromWorkspace(ctx context.Context, req *RequestMessage) (*EmptyChats, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogoutFromWorkspace not implemented")
}
func (*UnimplementedChatsServiceServer) LogoutFromChannel(ctx context.Context, req *RequestMessage) (*EmptyChats, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogoutFromChannel not implemented")
}
func (*UnimplementedChatsServiceServer) DeleteWorkspace(ctx context.Context, req *RequestMessage) (*EmptyChats, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWorkspace not implemented")
}
func (*UnimplementedChatsServiceServer) DeleteChannel(ctx context.Context, req *RequestMessage) (*EmptyChats, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteChannel not implemented")
}
func (*UnimplementedChatsServiceServer) DeleteChat(ctx context.Context, req *RequestMessage) (*EmptyChats, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteChat not implemented")
}

func RegisterChatsServiceServer(s *grpc.Server, srv ChatsServiceServer) {
	s.RegisterService(&_ChatsService_serviceDesc, srv)
}

func _ChatsService_CheckChatPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatsServiceServer).CheckChatPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_utils.ChatsService/CheckChatPermission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatsServiceServer).CheckChatPermission(ctx, req.(*RequestMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatsService_CheckChannelPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatsServiceServer).CheckChannelPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_utils.ChatsService/CheckChannelPermission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatsServiceServer).CheckChannelPermission(ctx, req.(*RequestMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatsService_GetChatByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatsServiceServer).GetChatByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_utils.ChatsService/GetChatByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatsServiceServer).GetChatByID(ctx, req.(*RequestMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatsService_GetChatsByUserID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatsServiceServer).GetChatsByUserID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_utils.ChatsService/GetChatsByUserID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatsServiceServer).GetChatsByUserID(ctx, req.(*RequestMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatsService_PutChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Chat)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatsServiceServer).PutChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_utils.ChatsService/PutChat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatsServiceServer).PutChat(ctx, req.(*Chat))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatsService_Contains_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Chat)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatsServiceServer).Contains(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_utils.ChatsService/Contains",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatsServiceServer).Contains(ctx, req.(*Chat))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatsService_GetWorkspaceByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatsServiceServer).GetWorkspaceByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_utils.ChatsService/GetWorkspaceByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatsServiceServer).GetWorkspaceByID(ctx, req.(*RequestMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatsService_GetWorkspacesByUserID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatsServiceServer).GetWorkspacesByUserID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_utils.ChatsService/GetWorkspacesByUserID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatsServiceServer).GetWorkspacesByUserID(ctx, req.(*RequestMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatsService_CreateWorkspace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Workspace)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatsServiceServer).CreateWorkspace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_utils.ChatsService/CreateWorkspace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatsServiceServer).CreateWorkspace(ctx, req.(*Workspace))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatsService_CreateChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Channel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatsServiceServer).CreateChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_utils.ChatsService/CreateChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatsServiceServer).CreateChannel(ctx, req.(*Channel))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatsService_GetChannelByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatsServiceServer).GetChannelByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_utils.ChatsService/GetChannelByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatsServiceServer).GetChannelByID(ctx, req.(*RequestMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatsService_EditWorkspace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatsServiceServer).EditWorkspace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_utils.ChatsService/EditWorkspace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatsServiceServer).EditWorkspace(ctx, req.(*RequestMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatsService_EditChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatsServiceServer).EditChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_utils.ChatsService/EditChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatsServiceServer).EditChannel(ctx, req.(*RequestMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatsService_LogoutFromWorkspace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatsServiceServer).LogoutFromWorkspace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_utils.ChatsService/LogoutFromWorkspace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatsServiceServer).LogoutFromWorkspace(ctx, req.(*RequestMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatsService_LogoutFromChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatsServiceServer).LogoutFromChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_utils.ChatsService/LogoutFromChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatsServiceServer).LogoutFromChannel(ctx, req.(*RequestMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatsService_DeleteWorkspace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatsServiceServer).DeleteWorkspace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_utils.ChatsService/DeleteWorkspace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatsServiceServer).DeleteWorkspace(ctx, req.(*RequestMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatsService_DeleteChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatsServiceServer).DeleteChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_utils.ChatsService/DeleteChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatsServiceServer).DeleteChannel(ctx, req.(*RequestMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatsService_DeleteChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatsServiceServer).DeleteChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_utils.ChatsService/DeleteChat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatsServiceServer).DeleteChat(ctx, req.(*RequestMessage))
	}
	return interceptor(ctx, in, info, handler)
}

var _ChatsService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grpc_utils.ChatsService",
	HandlerType: (*ChatsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckChatPermission",
			Handler:    _ChatsService_CheckChatPermission_Handler,
		},
		{
			MethodName: "CheckChannelPermission",
			Handler:    _ChatsService_CheckChannelPermission_Handler,
		},
		{
			MethodName: "GetChatByID",
			Handler:    _ChatsService_GetChatByID_Handler,
		},
		{
			MethodName: "GetChatsByUserID",
			Handler:    _ChatsService_GetChatsByUserID_Handler,
		},
		{
			MethodName: "PutChat",
			Handler:    _ChatsService_PutChat_Handler,
		},
		{
			MethodName: "Contains",
			Handler:    _ChatsService_Contains_Handler,
		},
		{
			MethodName: "GetWorkspaceByID",
			Handler:    _ChatsService_GetWorkspaceByID_Handler,
		},
		{
			MethodName: "GetWorkspacesByUserID",
			Handler:    _ChatsService_GetWorkspacesByUserID_Handler,
		},
		{
			MethodName: "CreateWorkspace",
			Handler:    _ChatsService_CreateWorkspace_Handler,
		},
		{
			MethodName: "CreateChannel",
			Handler:    _ChatsService_CreateChannel_Handler,
		},
		{
			MethodName: "GetChannelByID",
			Handler:    _ChatsService_GetChannelByID_Handler,
		},
		{
			MethodName: "EditWorkspace",
			Handler:    _ChatsService_EditWorkspace_Handler,
		},
		{
			MethodName: "EditChannel",
			Handler:    _ChatsService_EditChannel_Handler,
		},
		{
			MethodName: "LogoutFromWorkspace",
			Handler:    _ChatsService_LogoutFromWorkspace_Handler,
		},
		{
			MethodName: "LogoutFromChannel",
			Handler:    _ChatsService_LogoutFromChannel_Handler,
		},
		{
			MethodName: "DeleteWorkspace",
			Handler:    _ChatsService_DeleteWorkspace_Handler,
		},
		{
			MethodName: "DeleteChannel",
			Handler:    _ChatsService_DeleteChannel_Handler,
		},
		{
			MethodName: "DeleteChat",
			Handler:    _ChatsService_DeleteChat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "chats.proto",
}
