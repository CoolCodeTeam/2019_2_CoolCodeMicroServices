// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package models

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson9b8f5552DecodeGithubComGoParkMailRu20192CoolCodeMicroServicesUtilsModels(in *jlexer.Lexer, out *ResponseChatsArray) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Chats":
			if in.IsNull() {
				in.Skip()
				out.Chats = nil
			} else {
				in.Delim('[')
				if out.Chats == nil {
					if !in.IsDelim(']') {
						out.Chats = make([]Chat, 0, 1)
					} else {
						out.Chats = []Chat{}
					}
				} else {
					out.Chats = (out.Chats)[:0]
				}
				for !in.IsDelim(']') {
					var v1 Chat
					(v1).UnmarshalEasyJSON(in)
					out.Chats = append(out.Chats, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Workspaces":
			if in.IsNull() {
				in.Skip()
				out.Workspaces = nil
			} else {
				in.Delim('[')
				if out.Workspaces == nil {
					if !in.IsDelim(']') {
						out.Workspaces = make([]Workspace, 0, 1)
					} else {
						out.Workspaces = []Workspace{}
					}
				} else {
					out.Workspaces = (out.Workspaces)[:0]
				}
				for !in.IsDelim(']') {
					var v2 Workspace
					easyjson9b8f5552DecodeGithubComGoParkMailRu20192CoolCodeMicroServicesUtilsModels1(in, &v2)
					out.Workspaces = append(out.Workspaces, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9b8f5552EncodeGithubComGoParkMailRu20192CoolCodeMicroServicesUtilsModels(out *jwriter.Writer, in ResponseChatsArray) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Chats\":"
		out.RawString(prefix[1:])
		if in.Chats == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v3, v4 := range in.Chats {
				if v3 > 0 {
					out.RawByte(',')
				}
				(v4).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"Workspaces\":"
		out.RawString(prefix)
		if in.Workspaces == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.Workspaces {
				if v5 > 0 {
					out.RawByte(',')
				}
				easyjson9b8f5552EncodeGithubComGoParkMailRu20192CoolCodeMicroServicesUtilsModels1(out, v6)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ResponseChatsArray) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9b8f5552EncodeGithubComGoParkMailRu20192CoolCodeMicroServicesUtilsModels(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ResponseChatsArray) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9b8f5552EncodeGithubComGoParkMailRu20192CoolCodeMicroServicesUtilsModels(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ResponseChatsArray) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9b8f5552DecodeGithubComGoParkMailRu20192CoolCodeMicroServicesUtilsModels(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ResponseChatsArray) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9b8f5552DecodeGithubComGoParkMailRu20192CoolCodeMicroServicesUtilsModels(l, v)
}
func easyjson9b8f5552DecodeGithubComGoParkMailRu20192CoolCodeMicroServicesUtilsModels1(in *jlexer.Lexer, out *Workspace) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ID":
			out.ID = uint64(in.Uint64())
		case "Name":
			out.Name = string(in.String())
		case "Channels":
			if in.IsNull() {
				in.Skip()
				out.Channels = nil
			} else {
				in.Delim('[')
				if out.Channels == nil {
					if !in.IsDelim(']') {
						out.Channels = make([]*Channel, 0, 8)
					} else {
						out.Channels = []*Channel{}
					}
				} else {
					out.Channels = (out.Channels)[:0]
				}
				for !in.IsDelim(']') {
					var v7 *Channel
					if in.IsNull() {
						in.Skip()
						v7 = nil
					} else {
						if v7 == nil {
							v7 = new(Channel)
						}
						easyjson9b8f5552DecodeGithubComGoParkMailRu20192CoolCodeMicroServicesUtilsModels2(in, v7)
					}
					out.Channels = append(out.Channels, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Members":
			if in.IsNull() {
				in.Skip()
				out.Members = nil
			} else {
				in.Delim('[')
				if out.Members == nil {
					if !in.IsDelim(']') {
						out.Members = make([]uint64, 0, 8)
					} else {
						out.Members = []uint64{}
					}
				} else {
					out.Members = (out.Members)[:0]
				}
				for !in.IsDelim(']') {
					var v8 uint64
					v8 = uint64(in.Uint64())
					out.Members = append(out.Members, v8)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Admins":
			if in.IsNull() {
				in.Skip()
				out.Admins = nil
			} else {
				in.Delim('[')
				if out.Admins == nil {
					if !in.IsDelim(']') {
						out.Admins = make([]uint64, 0, 8)
					} else {
						out.Admins = []uint64{}
					}
				} else {
					out.Admins = (out.Admins)[:0]
				}
				for !in.IsDelim(']') {
					var v9 uint64
					v9 = uint64(in.Uint64())
					out.Admins = append(out.Admins, v9)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "CreatorID":
			out.CreatorID = uint64(in.Uint64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9b8f5552EncodeGithubComGoParkMailRu20192CoolCodeMicroServicesUtilsModels1(out *jwriter.Writer, in Workspace) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ID\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.ID))
	}
	{
		const prefix string = ",\"Name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"Channels\":"
		out.RawString(prefix)
		if in.Channels == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v10, v11 := range in.Channels {
				if v10 > 0 {
					out.RawByte(',')
				}
				if v11 == nil {
					out.RawString("null")
				} else {
					easyjson9b8f5552EncodeGithubComGoParkMailRu20192CoolCodeMicroServicesUtilsModels2(out, *v11)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"Members\":"
		out.RawString(prefix)
		if in.Members == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v12, v13 := range in.Members {
				if v12 > 0 {
					out.RawByte(',')
				}
				out.Uint64(uint64(v13))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"Admins\":"
		out.RawString(prefix)
		if in.Admins == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v14, v15 := range in.Admins {
				if v14 > 0 {
					out.RawByte(',')
				}
				out.Uint64(uint64(v15))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"CreatorID\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.CreatorID))
	}
	out.RawByte('}')
}
func easyjson9b8f5552DecodeGithubComGoParkMailRu20192CoolCodeMicroServicesUtilsModels2(in *jlexer.Lexer, out *Channel) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ID":
			out.ID = uint64(in.Uint64())
		case "Name":
			out.Name = string(in.String())
		case "TotalMSGCount":
			out.TotalMSGCount = int64(in.Int64())
		case "Members":
			if in.IsNull() {
				in.Skip()
				out.Members = nil
			} else {
				in.Delim('[')
				if out.Members == nil {
					if !in.IsDelim(']') {
						out.Members = make([]uint64, 0, 8)
					} else {
						out.Members = []uint64{}
					}
				} else {
					out.Members = (out.Members)[:0]
				}
				for !in.IsDelim(']') {
					var v16 uint64
					v16 = uint64(in.Uint64())
					out.Members = append(out.Members, v16)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Admins":
			if in.IsNull() {
				in.Skip()
				out.Admins = nil
			} else {
				in.Delim('[')
				if out.Admins == nil {
					if !in.IsDelim(']') {
						out.Admins = make([]uint64, 0, 8)
					} else {
						out.Admins = []uint64{}
					}
				} else {
					out.Admins = (out.Admins)[:0]
				}
				for !in.IsDelim(']') {
					var v17 uint64
					v17 = uint64(in.Uint64())
					out.Admins = append(out.Admins, v17)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "WorkspaceID":
			out.WorkspaceID = uint64(in.Uint64())
		case "CreatorID":
			out.CreatorID = uint64(in.Uint64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9b8f5552EncodeGithubComGoParkMailRu20192CoolCodeMicroServicesUtilsModels2(out *jwriter.Writer, in Channel) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ID\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.ID))
	}
	{
		const prefix string = ",\"Name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"TotalMSGCount\":"
		out.RawString(prefix)
		out.Int64(int64(in.TotalMSGCount))
	}
	{
		const prefix string = ",\"Members\":"
		out.RawString(prefix)
		if in.Members == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v18, v19 := range in.Members {
				if v18 > 0 {
					out.RawByte(',')
				}
				out.Uint64(uint64(v19))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"Admins\":"
		out.RawString(prefix)
		if in.Admins == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v20, v21 := range in.Admins {
				if v20 > 0 {
					out.RawByte(',')
				}
				out.Uint64(uint64(v21))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"WorkspaceID\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.WorkspaceID))
	}
	{
		const prefix string = ",\"CreatorID\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.CreatorID))
	}
	out.RawByte('}')
}
func easyjson9b8f5552DecodeGithubComGoParkMailRu20192CoolCodeMicroServicesUtilsModels3(in *jlexer.Lexer, out *Chat) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ID":
			out.ID = uint64(in.Uint64())
		case "Name":
			out.Name = string(in.String())
		case "TotalMSGCount":
			out.TotalMSGCount = int64(in.Int64())
		case "Members":
			if in.IsNull() {
				in.Skip()
				out.Members = nil
			} else {
				in.Delim('[')
				if out.Members == nil {
					if !in.IsDelim(']') {
						out.Members = make([]uint64, 0, 8)
					} else {
						out.Members = []uint64{}
					}
				} else {
					out.Members = (out.Members)[:0]
				}
				for !in.IsDelim(']') {
					var v22 uint64
					v22 = uint64(in.Uint64())
					out.Members = append(out.Members, v22)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "LastMessage":
			out.LastMessage = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9b8f5552EncodeGithubComGoParkMailRu20192CoolCodeMicroServicesUtilsModels3(out *jwriter.Writer, in Chat) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ID\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.ID))
	}
	{
		const prefix string = ",\"Name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"TotalMSGCount\":"
		out.RawString(prefix)
		out.Int64(int64(in.TotalMSGCount))
	}
	{
		const prefix string = ",\"Members\":"
		out.RawString(prefix)
		if in.Members == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v23, v24 := range in.Members {
				if v23 > 0 {
					out.RawByte(',')
				}
				out.Uint64(uint64(v24))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"LastMessage\":"
		out.RawString(prefix)
		out.String(string(in.LastMessage))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Chat) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9b8f5552EncodeGithubComGoParkMailRu20192CoolCodeMicroServicesUtilsModels3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Chat) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9b8f5552EncodeGithubComGoParkMailRu20192CoolCodeMicroServicesUtilsModels3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Chat) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9b8f5552DecodeGithubComGoParkMailRu20192CoolCodeMicroServicesUtilsModels3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Chat) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9b8f5552DecodeGithubComGoParkMailRu20192CoolCodeMicroServicesUtilsModels3(l, v)
}
